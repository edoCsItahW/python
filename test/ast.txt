Module(
    body=[
        ImportFrom(module='bs4', names=[alias(name='BeautifulSoup'), alias(name='Tag')], level=0),
        ImportFrom(module='cssutils', names=[alias(name='parseFile')], level=0),
        ImportFrom(module='os', names=[alias(name='PathLike')], level=0),
        ImportFrom(module='functools', names=[alias(name='cached_property')], level=0),
        ImportFrom(module='warnings', names=[alias(name='warn')], level=0),
        ImportFrom(module='ast', names=[alias(name='parse')], level=0),
        ImportFrom(module='astor', names=[alias(name='to_source')], level=0),
        ClassDef(
            name='htmlParser',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='htmlPath', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='PathLike', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        parser = htmlParser("./static/html.html")\n        print(parser.elements)\n\n        :param htmlPath: html文件路径\n        :type htmlPath: str | PathLike[str]\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_htmlPath', ctx=Store())], value=Name(id='htmlPath', ctx=Load()))], decorator_list=[]),
                FunctionDef(name='htmlPath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_htmlPath', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]),
                FunctionDef(name='soup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_htmlPath', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='file', ctx=Store()))], body=[Return(value=Call(func=Name(id='BeautifulSoup', ctx=Load()), args=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), Constant(value='html.parser')], keywords=[]))])], decorator_list=[Name(id='cached_property', ctx=Load())]),
                FunctionDef(name='elements', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='soup', ctx=Load()), attr='find_all', ctx=Load()), args=[], keywords=[keyword(arg='recursive', value=Constant(value=True))])], keywords=[]))], decorator_list=[Name(id='cached_property', ctx=Load())]),
                FunctionDef(name='show', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        属性::\n            name: 标签的名字，比如 'p', 'div' 等。\n\n            attrs: 一个字典，包含了标签的所有属性。\n\n            string: 如果标签内只有文本内容，则返回这些文本。否则返回None。\n\n            text: 获取标签及其所有子标签的文本内容。\n\n            parent: 标签的父标签。\n\n            next_sibling 和 previous_sibling: 标签的下一个和上一个同级标签。\n\n            next_element 和 previous_element: 无论是否同级，标签的下一个和上一个元素。\n\n            contents 和 children: 标签的直接子元素列表。\n\n            descendants: 标签的所有后代元素生成器。\n\n            prefix: 标签的命名空间前缀，如果没有则为None。\n\n            namespace: 标签的命名空间URL，如果没有则为None。\n\n            sourceline 和 sourcepos: 标签在源文档中的行号和位置。\n\n        方法::\n            append(), insert(), extend(): 向标签添加子元素。\n\n            clear() 和 decompose(): 移除标签及其内容。\n\n            replace_with() 和 replace_with_children(): 替换标签。\n\n            unwrap() 和 wrap(): 移除或添加标签的父标签。\n\n            find(), find_all(), find_next(), find_previous() 等: 搜索标签或内容。\n\n            has_attr() 和 get(): 检查标签是否有某个属性，并获取属性的值。\n\n            encode() 和 decode(): 对标签内容进行编码和解码。\n\n            prettify(): 格式化标签内容，使其更易读。\n\n            select() 和 select_one(): 使用CSS选择器来搜索标签。\n\n            is_empty_element(): 检查标签是否为空元素（例如 <br> 或 <img>）。\n\n        :return:\n        ")), For(target=Name(id='element', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='elements', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])
                ],
            decorator_list=[]),
        ClassDef(
            name='cssParser',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cssPath', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='PathLike', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        parser = cssParser("./static/css.css")\n\n        for rule in parser.sheet:\n            if rule.type == rule.STYLE_RULE:\n                print(rule.selectorText)\n                for prop in rule.style:\n                    print(prop.name, prop.value)\n\n        :param cssPath: css文件路径\n        :type cssPath: str | PathLike[str]\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cssPath', ctx=Store())], value=Name(id='cssPath', ctx=Load()))], decorator_list=[]),
                FunctionDef(name='cssPath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cssPath', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]),
                FunctionDef(name='sheet', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='parseFile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cssPath', ctx=Load())], keywords=[]))], decorator_list=[Name(id='cached_property', ctx=Load())])
                ],
            decorator_list=[]),
        ClassDef(
            name='tagWarpper',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='element', annotation=Name(id='Tag', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_element', ctx=Store())], value=Name(id='element', ctx=Load()))], decorator_list=[]),
                FunctionDef(name='element', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_element', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]),
                FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='element', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='>')]))], decorator_list=[])
                ],
            decorator_list=[]),
        ClassDef(
            name='htmlAst',
            bases=[],
            keywords=[],
            body=[
                Assign(targets=[Name(id='AST', ctx=Store())], value=Dict(keys=[Constant(value='body')], values=[List(elts=[], ctx=Load())])),
                FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='elements', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_elements', ctx=Store())], value=Name(id='elements', ctx=Load()))], decorator_list=[]),
                FunctionDef(name='elements', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_elements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]),
                FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='AST', ctx=Load()), slice=Constant(value='body'), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='toAst', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='elements', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='toAst', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='element', annotation=Name(id='Tag', ctx=Load()))], kwonlyargs=[arg(arg='key')], kw_defaults=[Constant(value='body')], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='self'), Constant(value='parent'), Constant(value='children')], values=[Call(func=Name(id='tagWarpper', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]), Call(func=Name(id='tagWarpper', ctx=Load()), args=[Attribute(value=Name(id='element', ctx=Load()), attr='parent', ctx=Load())], keywords=[]), ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='toAst', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='element', ctx=Load()), attr='children', ctx=Load()), ifs=[Attribute(value=Name(id='i', ctx=Load()), attr='name', ctx=Load())], is_async=0)])]))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='transform', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='AST', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='qtCovert', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='htmlAST', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_htmlAST', ctx=Store())], value=Name(id='htmlAST', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='transform', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='htmlAST', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_htmlAST', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ast', annotation=BinOp(left=Name(id='dict', ctx=Load()), op=BitOr(), right=Name(id='list', ctx=Load())))], kwonlyargs=[arg(arg='level', annotation=Name(id='int', ctx=Load())), arg(arg='laskKey', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=0), Constant(value=None)], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='ast', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ast', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='htmlAST', ctx=Load()), slice=Constant(value='body'), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ast', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='    '), op=Mult(), right=Name(id='level', ctx=Load())), op=Add(), right=JoinedStr(values=[FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value=':')]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[keyword(arg='level', value=BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='laskKey', value=Name(id='k', ctx=Load()))]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ast', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[For(target=Name(id='d', ctx=Store()), iter=Name(id='ast', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='transform', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[keyword(arg='level', value=BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1)))]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ast', ctx=Load()), Name(id='tagWarpper', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='    '), op=Mult(), right=Name(id='level', ctx=Load())), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='ast', ctx=Load())], keywords=[]))], keywords=[])), If(test=Compare(left=Name(id='laskKey', ctx=Load()), ops=[Eq()], comparators=[Constant(value='self')]), body=[Expr(value=Call(func=Name(id='qtFunc', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ast', ctx=Load()), attr='element', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='未知类型'), FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='ast', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])])])], decorator_list=[])], decorator_list=[]), ClassDef(name='qtFunc', bases=[], keywords=[], body=[Assign(targets=[Name(id='AST', ctx=Store())], value=Dict(keys=[Constant(value='import'), Constant(value='body')], values=[Dict(keys=[], values=[]), List(elts=[], ctx=Load())])), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='funcDict', ctx=Store())], value=Dict(keys=[Constant(value='html')], values=[Attribute(value=Name(id='cls', ctx=Load()), attr='html', ctx=Load())])), Try(body=[Return(value=Subscript(value=Name(id='funcDict', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value="没有为标签'<"), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=">'定义方法")])], keywords=[])), Return(value=Name(id='print', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='assign', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='funcDefine', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='funcName', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='html', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='AST', ctx=Load()), slice=Constant(value='import'), ctx=Load()), slice=Constant(value='sys'), ctx=Store())], value=List(elts=[Constant(value='argv')], ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='AST', ctx=Load()), slice=Constant(value='import'), ctx=Load()), slice=Constant(value='PyQt6.QtWidgets'), ctx=Store())], value=List(elts=[Constant(value='QApplication'), Constant(value='QMainWindow')], ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='AST', ctx=Load()), slice=Constant(value='body'), ctx=Load()), attr='append', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='splitAttr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[arg(arg='level', annotation=Name(id='int', ctx=Load())), arg(arg='laskKey', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=0), Constant(value=None)], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=4)), op=Mult(), right=Name(id='level', ctx=Load())), conversion=-1), FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value=':')])], keywords=[])), Expr(value=Call(func=Name(id='splitAttr', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[keyword(arg='level', value=BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1)))]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[For(target=Name(id='d', ctx=Store()), iter=Name(id='obj', ctx=Load()), body=[Expr(value=Call(func=Name(id='splitAttr', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[keyword(arg='level', value=BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1)))]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Name(id='laskKey', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=4)), op=Mult(), right=Name(id='level', ctx=Load())), conversion=-1), FormattedValue(value=Name(id='laskKey', ctx=Load()), conversion=-1), Constant(value=':')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=4)), op=Mult(), right=BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1))), conversion=-1), FormattedValue(value=Name(id='obj', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=4)), op=Mult(), right=Name(id='level', ctx=Load())), conversion=-1), FormattedValue(value=Name(id='obj', ctx=Load()), conversion=-1)])], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='filter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='_')], keywords=[]))), Call(func=Name(id='dir', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='splitAttr', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='i', ctx=Load())], keywords=[])], keywords=[keyword(arg='level', value=BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='laskKey', value=Name(id='i', ctx=Load()))]))], orelse=[])])])])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Pass()], orelse=[])], type_ignores=[])