from _typeshed import Incomplete
from os import PathLike
from pandas import Series
from types import ModuleType
from typing import Annotated, Callable, Literal

def clearfolder(folder_path) -> None: ...
def FileTree() -> None: ...
def runInCMD(*args: str, allowRIGHT: bool = ..., allowERROR: bool = ..., returnR: bool = ..., returnE: bool = ..., mod: Literal['utf-8', 'gbk', 'latin-1'] = ...): ...
def varname(variable: object): ...
def localattr(func: Callable): ...
def fullpath(dirpath: str): ...
def to_EXE(pyPath: str, mutliPath: list = ..., figPath: list[tuple] = ..., console: bool = ...): ...
def updateAllPackage() -> None: ...
def get_function_docs_in_file(modeName: str | ModuleType = ..., *, otherMagic: bool = ...) -> Series | list: ...

class PYI_spawnTools:
    dirPath: Incomplete
    mode: Incomplete
    def __init__(self, pyFileName: Annotated[str, 'like constantPackage.con_func'] | ModuleType, *, autoFile: str = ..., test: bool = ...) -> None: ...
    @property
    def content(self): ...
    @property
    def funcOfClass(self): ...
    def findImport(self): ...
    @property
    def rmMagicV(self): ...
    def getAllFunc(self): ...
    def toPYI(self, filePath: str = ...): ...

class CMDError(Exception):
    args: Incomplete
    def __init__(self, *args) -> None: ...

class instruct:
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, *, output: bool = ..., ignore: bool = ..., color: bool | Literal['red', 'yellow', 'green', 'blue'] = ..., eliminate: str = ...) -> None: ...
    def __call__(self, instruction: str, *, cwd: PathLike | str = ..., output: bool = ..., encoding: Literal['gbk', 'utf-8'] = ..., note: str = ...): ...
