from _typeshed import Incomplete
from pandas import DataFrame
from types import EllipsisType
from typing import Literal, TypeVar

con1 = TypeVar('((TYPE: str, ), )')
con2 = TypeVar('((TYPE: str, length: int), )')
con3 = TypeVar('((TYPE: str, length: int), notNull: bool, default: str | bool, auto: bool)')
con4 = TypeVar('((TYPE: str, length: int), notNull: bool, default: str | bool, auto: bool, other: str | None)')

def errorf(errorindex: str = ...): ...

class baseSQL:
    def __new__(cls, *args, **kwargs): ...
    datatype: Incomplete
    tbName: Incomplete
    def __init__(self, user: str, password: str, database: str = ..., *, host: str = ..., tableName: str = ...) -> None: ...
    @property
    def tableLen(self): ...
    @property
    def COLUMN(self): ...
    @property
    def DATABASE(self, *, show: bool = ...) -> list: ...
    @property
    def TABLE(self, *, show: bool = ...): ...
    def getColumn(self, tbName: str = ...) -> list[str]: ...
    def showTableFrame(self, tbName: str = ..., *, show: bool = ...) -> list: ...
    def showTableContent(self, tbName: str = ..., *, show: bool = ...) -> list: ...
    def selectColumn(self, tbName: str | tuple[str] = ..., columns: tuple[str, EllipsisType] = ..., *, condition: Literal['where ... and/or ... (like %str )'] | str = ..., show: bool = ...) -> list: ...
    def createDB(self, dbName: str, *, show: bool = ...) -> None: ...
    def dropDB(self, dbName: str, *, show: bool = ..., check: bool = ...) -> None: ...
    def createTable(self, tableName: str, id_AUTO: bool | str = ..., primarykey: str = ..., show: bool = ..., **kwargs: con1 | con2 | con3 | con4) -> None: ...
    def dropTable(self, tbName: str, *, show: bool = ..., check: bool = ...) -> None: ...
    def insert(self, tbName: str = ..., show: bool = ..., **kwargs) -> None: ...
    def update(self, tbName: str = ..., condition: Literal['where ... in ...', 'where ... and/or ...'] | str = ..., show: bool = ..., check: bool = ..., **kwargs) -> None: ...
    def delete(self, tbName: str = ..., *, condition: Literal['where ... and/or ...'] | str = ..., show: bool = ..., check: bool = ...) -> None: ...
    def column_add(self, tbName: str = ..., columnName: str = ..., dataType: str = ..., *, First: bool = ..., After: Literal['columnName'] = ..., notNull: bool = ..., show: bool = ...) -> None: ...
    def column_drop(self, tbName: str = ..., columnName: str = ..., *, show: bool = ..., check: bool = ...) -> None: ...
    def column_modify(self, tbName: str = ..., columnName: str = ..., dataType: str = ..., *, NoNULL: bool = ..., default: str = ..., show: bool = ...) -> None: ...
    def column_default(self, tbName: str = ..., columnName: str = ..., defValue: str = ..., *, show: bool = ...) -> None: ...
    def column_dropDef(self, tbName: str = ..., columnName: str = ..., *, show: bool = ...) -> None: ...
    def tbName_modify(self, tbName: str = ..., newTbName: str = ..., *, show: bool = ...) -> None: ...
    def column_change(self, tbName: str = ..., columnName: str = ..., newColumnName: str = ..., dataType: str = ..., *, show: bool = ...) -> None: ...
    def executeOhter(self, command: str = ..., *, _input: bool = ..., allowprint: bool = ..., circulate: bool = ...) -> EllipsisType: ...
    def to_csv(self, csv_path: str, tbName: str, *, condition: Literal['where ... = ...', 'where ... and/or ...'] | str = ...) -> None: ...
    def csv_to_mysql(self, csv_path: str, tbName: str) -> None: ...
    def table_to_DataFrame(self, tbName: str) -> DataFrame: ...
    def checkId(self, tbName: str = ..., *, firstNum: int = ...) -> None: ...
    def randomChoice(self, tbName: str = ..., *, condition: Literal['where ... in ...', 'where ... and/or ...'] | str = ..., limit: int = ...) -> list: ...
